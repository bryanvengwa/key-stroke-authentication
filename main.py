from pynput.keyboard import Key, Listener
from user_template import UserTemplate
import numpy as np
from utils import record_keystrokes


template = UserTemplate('user_features.db')
template.connect_to_database()
template.create_table()

def log_a_user():
    print('Please enter your username')
    user_name = input()
    # get the user id for the user
    id = template.get_user_id(user_name )
    if id is None:
        print('You are not yet registered')
        print('You have to register first')
    else:
        print('Welcome ' + user_name )
        print('Type in the paragraph below')
        print(template.generate_paragraph())
        logging_in_strokes =  template.record_keystrokes()
        user_strokes = template.retrieve_user_keystrokes(id)
        formatted_user_strokes = template.format_button_presses(user_strokes)
        similarity = template.calculate_similarity({'presses': [1715939347.134788, 1715939347.1898181, 1715939347.349696, 1715939347.466728, 1715939347.790895, 1715939348.387847, 1715939348.5680902, 1715939348.7482681, 1715939348.9119518, 1715939349.108604, 1715939349.28964, 1715939350.0102458, 1715939350.1067488, 1715939350.2627132, 1715939350.445954, 1715939350.6651368, 1715939350.6652899, 1715939350.886509, 1715939351.240696, 1715939351.623528, 1715939351.948587, 1715939352.10488, 1715939352.3282151, 1715939352.691514, 1715939352.9077, 1715939353.183011, 1715939353.354452, 1715939353.484834, 1715939353.700507, 1715939353.780509, 1715939354.1675048, 1715939354.450397, 1715939354.608636, 1715939354.6275752, 1715939354.845365, 1715939354.9018571, 1715939355.025729, 1715939355.253574, 1715939355.538524], 'releases': [1715939347.262229, 1715939347.341713, 1715939347.4337258, 1715939347.650697, 1715939347.926819, 1715939348.559577, 1715939348.6889322, 1715939348.8837051, 1715939349.079733, 1715939349.264527, 1715939349.429798, 1715939350.1546712, 1715939350.318391, 1715939350.365942, 1715939350.6648698, 1715939350.747435, 1715939350.775532, 1715939350.9787672, 1715939351.356651, 1715939351.779597, 1715939352.031467, 1715939352.186462, 1715939352.440788, 1715939352.90336, 1715939353.1115332, 1715939353.3425128, 1715939353.458536, 1715939353.72353, 1715939353.8808792, 1715939353.9644978, 1715939354.3076239, 1715939354.5465322, 1715939354.7618182, 1715939354.89821, 1715939354.945614, 1715939355.061226, 1715939355.2577548, 1715939355.340887, 1715939355.6319191]},{'presses': [1715939347.134788, 1715939347.1898181, 1715939347.349696, 1715939347.466728, 1715939347.790895, 1715939348.387847, 1715939348.5680902, 1715939348.7482681, 1715939348.9119518, 1715939349.108604, 1715939349.28964, 1715939350.0102458, 1715939350.1067488, 1715939350.2627132, 1715939350.445954, 1715939350.6651368, 1715939350.6652899, 1715939350.886509, 1715939351.240696, 1715939351.623528, 1715939351.948587, 1715939352.10488, 1715939352.3282151, 1715939352.691514, 1715939352.9077, 1715939353.183011, 1715939353.354452, 1715939353.484834, 1715939353.700507, 1715939353.780509, 1715939354.1675048, 1715939354.450397, 1715939354.608636, 1715939354.6275752, 1715939354.845365, 1715939354.9018571, 1715939355.025729, 1715939355.253574, 1715939355.538524], 'releases': [1715939347.262229, 1715939347.341713, 1715939347.4337258, 1715939347.650697, 1715939347.926819, 1715939348.559577, 1715939348.6889322, 1715939348.8837051, 1715939349.079733, 1715939349.264527, 1715939349.429798, 1715939350.1546712, 1715939350.318391, 1715939350.365942, 1715939350.6648698, 1715939350.747435, 1715939350.775532, 1715939350.9787672, 1715939351.356651, 1715939351.779597, 1715939352.031467, 1715939352.186462, 1715939352.440788, 1715939352.90336, 1715939353.1115332, 1715939353.3425128, 1715939353.458536, 1715939353.72353, 1715939353.8808792, 1715939353.9644978, 1715939354.3076239, 1715939354.5465322, 1715939354.7618182, 1715939354.89821, 1715939354.945614, 1715939355.061226, 1715939355.2577548, 1715939355.340887, 1715939355.6319191]} )
        print("the similarity is : " , similarity)




def register_user(): 
    new_id = template.generate_user_id()
    print('Please Enter your username')
    user_name = input()
    print('creating a user with username : ' + user_name )
    template.register_user(new_id, user_name)
    print("Now type the paragraph below")
    paragraph_2 = template.generate_paragraph()
    print(paragraph_2)

    template.start_capture(new_id)
    print('we are passing the id ' + new_id)


def validate_action(action):
    if action == 1:
        register_user()
    elif action == 2:
        log_a_user()


def query_action(redo: bool):
    valid_numbers = [1, 2, 3]
    if redo:
        print("Please enter a valid number")
    else:
        print("What do you want to do ?")
    print("1. Register a user")
    print("2. Log a user into the system")
    print("Enter the number of your option.......")
    response = ''
    try:
        response = int(input())
    except:
        query_action(True)

    if response not in valid_numbers:
        query_action(True)
    else:
        validate_action(response)

    return response


query_action(False)
